#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π –ø–∞–π–ø–ª–∞–π–Ω:
1) –ß–∏—Ç–∞–µ—Ç ./files.txt (–æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ, —Å—Ç—Ä–æ–∫–∏ —Å # –∏–≥–Ω–æ—Ä—è—Ç—Å—è)
2) –ö–∞—á–∞–µ—Ç –≤—Å—ë –≤ ./src
3) –í—ã–Ω–∏–º–∞–µ—Ç –∞—É–¥–∏–æ (m4a, AAC 128k) –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  - Python 3.8+
  - pip install yt-dlp
  - ffmpeg –≤ PATH (–∏–ª–∏ —É–∫–∞–∂–∏ –ø—É—Ç—å –≤ FFMPGE_PATH –Ω–∏–∂–µ)
"""

import subprocess
import sys
import shlex
import re
from pathlib import Path
from datetime import datetime

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
INPUT_FILE = Path("./files.txt")
SRC_DIR = Path("./src")
FFMPEG_PATH = "ffmpeg"    # –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ –Ω–µ –≤ PATH
YTDLP_BIN = "yt-dlp"      # –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ –Ω–µ –≤ PATH

# ==== –£—Ç–∏–ª–∏—Ç—ã ====
def run(cmd: str) -> subprocess.CompletedProcess:
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫, –∫–∏–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–Ω—É–ª–µ–≤–æ–º –∫–æ–¥–µ."""
    return subprocess.run(shlex.split(cmd), check=True, text=True,
                          stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def try_run(cmd: str) -> subprocess.CompletedProcess:
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –≤–µ—Ä–Ω—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    return subprocess.run(shlex.split(cmd), check=False, text=True,
                          stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def trim(s: str) -> str:
    return s.strip()

def ensure_tools():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
    r = try_run(f"{FFMPEG_PATH} -version")
    if r.returncode != 0:
        print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ PATH –∏–ª–∏ –ø—Ä–æ–ø–∏—à–∏ –ø—É—Ç—å –≤ FFMPEG_PATH.", file=sys.stderr)
        sys.exit(1)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ yt-dlp
    r = try_run(f"{YTDLP_BIN} --version")
    if r.returncode != 0:
        print("‚ùå yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏:  pip install yt-dlp  –∏–ª–∏ –¥–æ–±–∞–≤—å –≤ PATH.", file=sys.stderr)
        sys.exit(1)

def read_links(path: Path) -> list[str]:
    if not path.exists():
        print(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏: {path.resolve()}", file=sys.stderr)
        sys.exit(1)
    links: list[str] = []
    for line in path.read_text(encoding="utf-8").splitlines():
        line = trim(line)
        if not line or line.startswith("#"):
            continue
        links.append(line)
    return links

YT_RE = re.compile(r"(youtube\.com|youtu\.be)", re.IGNORECASE)

def safe_filename(s: str) -> str:
    """–ß–∏—Å—Ç–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ _
    return re.sub(r'[\\/*?:"<>|]', "_", s)

def safe_name_from_url(url: str) -> str:
    """–ò–º—è —Ñ–∞–π–ª–∞: –¥–ª—è YouTube ‚Äî ID + –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–Ω–∞—á–µ basename."""
    if YT_RE.search(url):
        # –ü–æ–ª—É—á–∞–µ–º ID –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        r = try_run(f'{YTDLP_BIN} --get-id --get-title {shlex.quote(url)}')
        if r.returncode == 0:
            lines = [trim(x) for x in r.stdout.splitlines() if trim(x)]
            if len(lines) >= 2:
                vid_id, title = lines[0], lines[1]
                return safe_filename(f"{vid_id}_{title}")
            elif lines:
                return safe_filename(lines[0])
    # generic: —É–±–∏—Ä–∞–µ–º query –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    clean = url.split("?", 1)[0]
    base = Path(clean).name
    stem = Path(base).stem
    stem = stem or f"item_{int(datetime.now().timestamp()*1000)}"
    return safe_filename(stem)

def download_one(url: str, dst_dir: Path, stem: str) -> None:
    """
    –ü—Ä–∞–≤–∏–ª–∞:
    - YouTube ‚Üí yt-dlp -S "res:1080,fps"
    - *.m3u8 ‚Üí ffmpeg -c copy ‚Üí .ts
    - –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí yt-dlp (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
    """
    dst_dir.mkdir(parents=True, exist_ok=True)

    if url.lower().endswith(".m3u8") or ".m3u8?" in url.lower():
        out = dst_dir / f"{stem}.ts"
        cmd = f'{FFMPEG_PATH} -y -hide_banner -loglevel error -i {shlex.quote(url)} -c copy {shlex.quote(str(out))}'
        r = try_run(cmd)
        if r.returncode != 0:
            raise RuntimeError(f"ffmpeg –Ω–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å HLS: {url}\n{r.stderr}")
        return

    if YT_RE.search(url):
        # YouTube
        out_tpl = dst_dir / f"{stem}.%(ext)s"
        cmd = f'{YTDLP_BIN} -S "res:1080,fps" -o {shlex.quote(str(out_tpl))} {shlex.quote(url)}'
    else:
        # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–¥–∞—ë–º yt-dlp
        out_tpl = dst_dir / f"{stem}.%(ext)s"
        cmd = f'{YTDLP_BIN} -o {shlex.quote(str(out_tpl))} {shlex.quote(url)}'

    r = try_run(cmd)
    if r.returncode != 0:
        raise RuntimeError(f"yt-dlp –Ω–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å: {url}\n{r.stderr}")

def transcode_to_m4a(src_file: Path, out_file: Path) -> None:
    # –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º AAC 128k, –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–æ—Ä–æ–∂–∫—É, faststart
    cmd = (
        f'{FFMPEG_PATH} -y -hide_banner -loglevel error '
        f'-i {shlex.quote(str(src_file))} -vn -c:a aac -b:a 128k -movflags +faststart '
        f'{shlex.quote(str(out_file))}'
    )
    r = try_run(cmd)
    if r.returncode != 0:
        raise RuntimeError(f"ffmpeg –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å {src_file.name} ‚Üí {out_file.name}\n{r.stderr}")

def main():
    print(f"üìÑ –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫: {INPUT_FILE.resolve()}")
    print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤: {SRC_DIR.resolve()}\n")

    ensure_tools()
    links = read_links(INPUT_FILE)
    if not links:
        print("üò∂ –í —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.")
        return

    # === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ===
    print("üîΩ –°–∫–∞—á–∏–≤–∞–µ–º...")
    for i, url in enumerate(links, start=1):
        stem = safe_name_from_url(url)
        # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–ª–ª–∏–∑–∏–π, –ø—Ä–æ–Ω—É–º–µ—Ä—É–µ–º
        stem = f"{i:02d}_{stem}"
        print(f"  [{i:02d}] {url}  ‚Üí  src/{stem}.*")
        try:
            download_one(url, SRC_DIR, stem)
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é (–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è): {e}")

    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

    # === –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
    print("üéß –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ m4a...")
    any_done = False
    for src in sorted(SRC_DIR.glob("*")):
        if not src.is_file():
            continue
        stem = src.stem
        out = Path(f"./{stem}.m4a")
        try:
            transcode_to_m4a(src, out)
            print(f"  ‚úî {src.name} ‚Üí {out.name}")
            any_done = True
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é (–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è): {e}")

    if not any_done:
        print("ü§∑ –ù–µ—á–µ–≥–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å. –ü–æ—Ö–æ–∂–µ, src –ø—É—Å—Ç–∞—è?")
    else:
        print("\nüèÅ –ì–æ—Ç–æ–≤–æ! –ò—Å—Ö–æ–¥–Ω–∏–∫–∏ –≤ ./src, –∞—É–¥–∏–æ .m4a ‚Äî –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –£–±–µ–≥–∞—é –∫—Ä–∞—Å–∏–≤–æ...")
        sys.exit(130)
