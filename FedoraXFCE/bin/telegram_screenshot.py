import sys
import os
import re
import json
import subprocess
import argparse
import asyncio
from pathlib import Path
from telegram import Bot
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from datetime import datetime
from dotenv import load_dotenv

# sudo dnf install xfce4-screenshooter xdotool xclip

log_file = Path.home() / "tmp" / "telegram_screenshot.log"
(Path.home() / "tmp" ).mkdir(parents=True, exist_ok=True)

sys.stdout = open(log_file, "a")
sys.stderr = sys.stdout

load_dotenv(os.path.expanduser("~/.env"))
BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_ID = os.getenv("TELEGRAM_ID")
IMAGE_FILE = Path.home() / "tmp" /"screenshot.png"

CONFIG_PATH = Path.home() / ".config" / "tgsnap"
CONFIG_FILE = CONFIG_PATH / "config.json"
bot = Bot(token=BOT_TOKEN)

def main():    
    result = asyncio.run(handle_init())
    if result:
        return

    parser = argparse.ArgumentParser(description="Screenshot sender to Telegram")
    parser.add_argument("--init", action="store_true", help="–ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–∞–Ω–∞–ª–∞")
    args = parser.parse_args()

    if args.init:        
        try:
            chat_id, thread_id = parse_telegram_topic_url()        
            save_config(chat_id, thread_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return
     

    chat_id, thread_id = load_config()

    try:
        take_screenshot()
        asyncio.run(send_to_telegram(chat_id, thread_id))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")    

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===

async def handle_init():    
    print("[*] –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    updates = await bot.get_updates(limit=100, allowed_updates=["message"])

    for update in reversed(updates):
        msg = update.message
        if not msg or not msg.text:
            continue

        text = msg.text.lower()
        user_id = str(msg.from_user.id)

        if user_id != TELEGRAM_ID:
            continue

        if "@init" in text:
            chat_id = msg.chat.id
            thread_id = msg.message_thread_id or (
                msg.reply_to_message.message_thread_id if msg.reply_to_message else None
            )

            if thread_id:
                print(f"[+] @init –æ—Ç {user_id}: chat={chat_id}, thread={thread_id}")                
                save_config(chat_id, thread_id)      
                try:
                    await bot.delete_message(chat_id=chat_id, message_id=msg.message_id)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ @init –æ—Ç {user_id}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")            
                await bot.get_updates(offset=update.update_id + 1)                  
                return True
            
    return False

def save_user_map(data):
    CONFIG_PATH.mkdir(parents=True, exist_ok=True)
    with open(CONFIG_FILE, "w") as f:
        json.dump(data, f, indent=2)

def save_config(chat_id, thread_id):
    CONFIG_PATH.mkdir(parents=True, exist_ok=True)
    with open(CONFIG_FILE, "w") as f:
        json.dump({"chat_id": chat_id, "thread_id": thread_id}, f)
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {CONFIG_FILE}")

def load_config():
    if not CONFIG_FILE.exists():
        raise FileNotFoundError("–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --init")
    with open(CONFIG_FILE) as f:
        data = json.load(f)
    return data["chat_id"], data["thread_id"]

# === –°–ö–†–ò–ù–®–û–¢ X11 (XFCE)

def take_screenshot():
    print("[*] –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ xfce4-screenshooter...")
    if Path(IMAGE_FILE).exists():
        os.remove(IMAGE_FILE)

    subprocess.run([
        "xfce4-screenshooter",
        "--region",
        "--save", IMAGE_FILE
    ])
    if not Path(IMAGE_FILE).exists():
        raise RuntimeError("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# === –¢–ï–õ–ï–ì–†–ê–ú ===

async def send_to_telegram(chat_id, thread_id):
    print("[*] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω–∞ –≤ Telegram...")    
    with open(IMAGE_FILE, "rb") as img:
        await bot.send_photo(
            chat_id=chat_id,
            photo=img,
            message_thread_id=thread_id,
            # caption=f"üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç {datetime.now().strftime('%H:%M:%S')}" - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π –∑–∞–∫–ª–∞–¥–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        )
    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


def parse_telegram_topic_url():
    """
        –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ https://t.me/c/CHAT_ID/THREAD_ID/MSG_ID
    """
    tg_url = input("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–º—É –≤ –∫–∞–Ω–∞–ª–µ (–≤–∏–¥–∞ https://t.me/c/...): ").strip()
    match = re.match(r"https://t\.me/c/(-?\d+)/(\d+)(?:/(\d+))?", tg_url)
    if not match:
        raise ValueError("–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü—Ä–∏–º–µ—Ä: https://t.me/c/1756893672/12759/12789")
    
    chat_id = int(f"-100{match.group(1)}")
    thread_id = int(match.group(2))
    print(f"‚úÖ –ß–∞—Ç ID: {chat_id}, –¢–æ–ø–∏–∫ ID: {thread_id}")
    return chat_id, thread_id

if __name__ == "__main__":
    main()
